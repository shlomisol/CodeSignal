//
// Definition for binary tree:
// template<typename T>
// struct Tree {
//   Tree(const T &v) : value(v), left(nullptr), right(nullptr) {}
//   T value;
//   Tree *left;
//   Tree *right;
// };
#define SMALLEST_NODE_VALUE -1000

int findMax(vector<int> nums)
{
    int numsSize = nums.size();
    int max = SMALLEST_NODE_VALUE;
    for(int i=0; i<numsSize; i++)
    {
        if(nums[i]>max)
        {
            max = nums[i];
        }
    }
    return max;
}

std::vector<int> largestValuesInTreeRows(Tree<int> * t) {
    queue<Tree<int>*> curRow;
    queue<Tree<int>*> nextRow;
    Tree<int>* cur;
    vector<int> res;
    vector<int> curNums;
    if(!t)
        return res;
    // first row is initialized to be root
    curRow.push(t);
    while(1)
    {
        while(!curRow.empty())
        {
            cur = curRow.front();

            // initialize nextRow to hold current row's children from left to right
            if(cur->left)
                nextRow.push(cur->left);

            if(cur->right)
                nextRow.push(cur->right);

            // insert nodes' value to curNums
            curNums.push_back(cur->value);
            curRow.pop();
        }
        res.push_back(findMax(curNums));
        curNums.clear();
        while(!nextRow.empty())
        {
            curRow.push(nextRow.front());
            nextRow.pop();
        }
        if(curRow.empty())
            break;
    }
    
    return res;
}

// Definition for singly-linked list:
// template<typename T>
// struct ListNode {
//   ListNode(const T &v) : value(v), next(nullptr) {}
//   T value;
//   ListNode *next;
// };
//
int getListLen(ListNode<int>* head)
{
    int count = 0;
    while(head)
    {
        count++;
        head = head->next;
    }
    return count;
}
ListNode<int>* getNode(ListNode<int>* head, int nodePos)
{
    int curPos = 1;
    while(head && curPos < nodePos)
    {
        head = head->next;
        curPos++;
    }
    return head;
}
ListNode<int>* getTail(ListNode<int>* head)
{
    while(head->next!=NULL)
    {
        head = head->next;
    }
    return head;
}
ListNode<int> * rearrangeLastN(ListNode<int> * l, int n) {
    if(n == 0)
    {
        return l;
    }
    int listLen = getListLen(l);
    if(n == listLen)
    {
        return l;
    }
    ListNode<int>* breakPoint = getNode(l, listLen - n);
    ListNode<int>* newHead = breakPoint->next;
    ListNode<int>* tail = getTail(l);
    breakPoint->next = NULL;
    tail -> next = l;
    return newHead;
}
